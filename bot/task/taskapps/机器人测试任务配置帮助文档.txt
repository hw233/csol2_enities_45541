--------------------------------------------------
机器人测试任务配置帮助文档
--------------------------------------------------
一、如何让机器人执行指定任务：
	首先，创建任务配置。
		例如，需要机器人传送到凤鸣城(75, 15, 16)的位置，
		然后在世界频道说一句话：“我来到凤鸣城啦！”那么
		应该这样配置这个任务：
			DATA["teleport_feng_ming_cheng"] = (
				"custom_serial", (
					("Teleport", ("fengming", (75, 15, 16))),
					("Wait", (40,)),
					("Talk", (7, "我来到凤鸣城啦！")),
				),
			)

			将以上配置复制粘贴到机器人测试任务配置文件中即可。
			配置文件路径在 bot/task/taskapps/appdata.py

			配置的结构是这样：
				DATA[ 任务唯一标识 ] = (
					任务模板名称, 任务配置数据,
				)

				跟上面的配置对应起来：
				任务唯一标识： "teleport_feng_ming_cheng"
				任务模板名称： "custom_serial"
				任务配置数据：
					(
					("Teleport", ("fengming", (75, 15, 16))),
					("Wait", (40,)),
					("Talk", (7, "我来到凤鸣城啦！")),
					)

			下面对各个字段进行说明：

			*DATA：用来存储所有任务配置的字典；

			*teleport_feng_ming_cheng：用来识别任务的唯一标识，
				这是一个字符串，这个标识的名称应该能容易看出任务
				是做什么的，记得在前后加上英文版的双引号或者单引
				号；

			*custom_serial：这是任务模板名称，模板在templates.py
				模块中定义。表明使用哪个模板来创建任务实例。不同
				的模板可能有不同的任务配置数据组织方式，需要根据
				选定的模板所要求的方式进行配置。

				custom_serial是通用的自定义任务模板，它能创建出顺
				序执行的任意数量的任务序列，而它所要求的组织方式
				就是元组嵌套的方式（用一对括号把所有任务括起来）。
				更多信息可以查看“任务、任务模板的介绍及应用实例”
				部分。

				记得在前后加上英文版的双引号或者单引号；

			*Teleport：这是传送任务标识，在Task.py模块中定义。这个
				任务的目标是让机器人传送到指定地图的指定位置。

				“("Teleport", ("fengming", (75, 15, 16))),”是一个
				完整的任务实例，当执行到它时，机器人会传送到凤鸣城
				(75, 15, 16)的位置。最外层括号包括的所有内容组成
				一个完整的任务实例，括号内部由两部分组成，以逗号分割，
				左边是任务标识，右边是任务需要的数据，数据的组织方式
				由任务决定，不同的任务会有不同的要求，例如接下来的任
				务Wait，右边的数据是(40,)。最右边的逗号必须加上，这是
				任务Teleport配置完成的标记；

			*Wait：这是等待任务标识，这个任务的目标是让机器人等待一段
				时间再执行后续任务。("Wait", (40,))是让机器人等40秒再
				执行后面的说话任务。这么做是因为，机器人传送后，通常需
				要一段时间才能在有真实客户端的测试人员的客户端上看到这
				个机器人（测试人员的角色在机器人传送地图位置附近），于
				是加上40秒左右的延迟，测试人员就会先看到机器人出现在其
				客户端上，然后再喊话。

				括号内容说明参考任务Teleport；

			*Talk：这是讲话任务标识，执行到这个任务时，机器人会在指定频
				道说话。("Talk", (7, "我来到凤鸣城啦！"))是让机器人在世
				界频道说“我来到凤鸣城啦！”

				括号内容说明参考任务Teleport；

			配置说明至此结束。

	其次，添加机器人。
		如果没有开启机器人进程，则需要先启动机器人进程。启动过程可以参考
		以下方式：
			1、登入已安装好BigWorld机器人程序的服务器；
				要确保已经配置了正确的机器人测试服务器地址和端口，
				通常在trunk/res/server/bw.xml配置文件中的<bots>
				字段配置。

			2、假设机器人程序在目录：~/trunk/bigworld/bin/Hybrid/
				启动机器人进程：
				cd ~/trunk/bigworld/bin/Hybrid/
				./bots >& ~/bots.log &

				说明：~/bots.log是进程日志输出文件，需要预先创建好。

		在日志文件中找到机器人进程的python控制台运行端口，可以搜索
		running on找到，然后telnet到机器人进程的python控制台。例如
		在172.16.0.15服务器中开启了机器人进程，python控制台运行在
		49666端口，在命令行中输入：telnet 172.16.0.15 49666

		接下来就可以开始添加机器人了：
		>>> BigWorld.addBots(1)				# 添加一个机器人
		>>> BigWorld.addBotsSlowly(10, 1)	# 每隔1秒加一个机器人，总共加10个

	最后，开始让机器人执行测试任务。
		同样，要先连接到机器人进程的python控制台，然后：
		>>> import Kuma										# 导入测试模块
		>>> Kuma.test_task("teleport_feng_ming_cheng", 10)	# 让10个机器人执行上面创建的传送凤鸣城的测试任务

		说明：接口test_task指定了要10个机器人执行测试任务，10个机器人是指10
		个当前处于空闲状态的机器人，即没有执行任务的机器人。如果空闲的机器人
		少于10个也同样能执行任务而不会出错，只是实际执行任务的机器人会少于10
		个。更多关于空闲机器人的说明见机器人测试操作说明。


二、机器人测试操作说明：

	机器人测试操作通常包括启动机器人进程，连接机器人进程的python控制台，
	添加机器人、让机器人执行指定任务、取消机器人执行的任务，删除机器人。
	下面对各项操作进行说明：

	*启动机器人进程
		1、登入已安装好BigWorld机器人程序的服务器；
			要确保已经配置了正确的机器人测试服务器地址和端口，
			通常在~/trunk/res/server/bw.xml配置文件中的<bots>
			字段配置：
			<serverName> 172.16.0.242 </serverName> <!-- 服务器loginapp地址 -->
			<port> 20013 </port> <!-- 服务器loginapp的连接端口 -->

		2、假设机器人程序在目录：~/trunk/bigworld/bin/Hybrid/
			启动机器人进程：
			cd ~/trunk/bigworld/bin/Hybrid/
			./bots >& ~/bots.log &

			说明：~/bots.log是进程日志输出文件，需要预先创建好，当然也可以
			不加上“>& ~/bots.log &”，这样就不会将日志输出到指定文件。

			或者可以通过命令行参数指定连接的服务器和端口，例如这样
			启动机器人进程：
			./bots -serverName 172.16.0.242 -port 20013 >& ~/bots.log &

	*连接机器人进程的python控制台
		在日志文件~/bots.log中找到机器人进程的python控制台运行端口，
		可以搜索running on找到，然后telnet到机器人进程的python控制
		台。例如在172.16.0.15服务器中开启了机器人进程，python控制台
		运行在49666端口，在命令行中输入：telnet 172.16.0.15 49666
		即可成功连接到python控制台。

	*添加机器人
		假设已经成功连接到机器人进程的python控制台，然后：
		>>> BigWorld.addBots(1)				# 添加一个机器人
		>>> BigWorld.addBotsSlowly(10, 1)	# 每隔1秒加一个机器人，总共加10个

	*让机器人执行指定任务
		假设已经成功连接到机器人进程的python控制台，然后：
		# 导入测试模块
		>>> import Kuma

		# 让10个机器人执行上面创建的传送凤鸣城的测试任务
		>>> Kuma.test_task("teleport_feng_ming_cheng", 10)

		说明：接口test_task指定了要10个机器人执行测试任务，10个机器人是指10
		个当前处于空闲状态的机器人，即没有执行任务的机器人。如果空闲的机器人
		少于10个也同样能执行任务而不会出错，只是实际执行任务的机器人会少于10
		个。

		如果成功让10个机器人开始执行任务，那么这10个机器人在任务结束之前不再
		是空闲机器人。假设机器人进程上只有这10个机器人，那么机器人进程上就没
		有空闲机器人了，这时如果再用test_task接口让机器人执行任务，那么将没有
		一个机器人会去执行指定任务。

	*取消机器人执行的任务
		假设已经成功连接到机器人进程的python控制台，然后：
		# 导入测试模块
		>>> import Kuma

		# 取消指定任务
		>>> Kuma.release_task("teleport_feng_ming_cheng", 10)

		说明：接口release_task释放了10个正在执行测试任务teleport_feng_ming_cheng
		的机器人，于是这10个机器人成为空闲机器人，可以重新被用来执行其他任务。

		# 取消所有任务
		>>> Kuma.release_all_tasks()

		说明：接口release_all_tasks释放了所有正在执行测试任务的机器人，不管机器
		人正在执行什么任务，这些任务都会被终止，进程上的所有机器人变为空闲机器人。

	*删除机器人
		假设已经成功连接到机器人进程的python控制台，然后：
		>>> BigWorld.delBots(1)				# 删除一个机器人

		说明：接口delBots会删除机器人进程上某个机器人，无法指定删除哪个。
		如果这个机器人正在执行测试任务，那么可能会出错，但是不影响其他机
		器人测试。

	*查看机器人测试情况
		假设已经成功连接到机器人进程的python控制台，然后：
		# 导入测试模块
		>>> import Kuma
		>>> Kuma.ls_task("teleport_feng_ming_cheng")

		说明：接口ls_task会把当前进程上正在执行的指定任务以及对应的机器人
		数量列出，并会列出空闲机器人的数量。如果没有指定任务，则会列出所有
		任务。


三、任务配置说明

	任务有单一任务和任务组两种类型，单一任务如：传送（Teleport）、
	等待（Wait）、移动（Move）、说话（Talk）等；任务组目前提供了顺序任务组
	（SerialTaskGroup）和并发任务组（ParallelTaskGroup）两种。

	任务组负责对任务进行组织，以实现不同的任务执行和退出方式。例如顺序任务
	组内的任务会一个一个顺序执行，上一个结束才会继续执行下一个任务，直到最
	后一个任务结束，整个任务组才结束；而并列任务组内，所有任务会同时并发执
	行，最晚结束的任务结束后整个任务组才结束。

	为了方便配置，并能对各种任务进行灵活的组合，于是提供了任务模板。任务模
	板需要先由脚本人员编码实现，然后才能提供给配置人员进行配置。任务模板在
	templates.py模块中实现。

	当决定要配置一个测试任务，那么首先要根据测试需要选定合适的任务模板。例
	如要配置一系列有先后执行顺序的任务组合，就应该选择自定义顺序模板（
	custom_serial），而要配置一组同时并发执行的任务，例如让机器人一边移动
	一边说话，就应该选择自定义并发模板（custom_parallel）。

	任务模板会根据配置的数据生成一个任务实例，这意味着可以配置嵌套的模板，
	从而提高配置的灵活性。

	任务和任务模板的详细介绍在“任务、任务模板的介绍及应用实例”部分给出。


四、任务、任务模板的介绍及应用实例（持续更新...）

	注意任务和任务模板名称要严格区分大小写！

	1、单一任务介绍：

		*WizCommand
			作用：让机器人执行一条GM指令，需要机器人有对应权限

			配置方式：
				参数：(cmd,)
				参数说明：
					cmd		: 字符串（string），GM指令

			使用实例：
				配置一个给机器人设置999999999游戏币的任务
				DATA["set_money"] = (
					"custom_serial", (
						("WizCommand", ("/set_money 999999999",),),
					)
				)

				这里使用custom_serial模板来创建任务实例，可以查看
				“2、任务模板介绍”部分获取更多信息。

		*Teleport
			作用：将机器人传送到指定地图的指定位置

			配置方式：
				参数：(spaceLabe, position,)
				参数说明：
					spaceLabe	: 字符串（string），传送目标地图名称
					position	: 3元组 or Vector3，传送目标位置

			使用实例：
				配置一个传送到凤鸣城(0, 0, 0)点的任务
				DATA["teleport_fengming"] = (
					"custom_serial", (
						("Teleport", ("fengming", (0, 0, 0),),),
					),
				)

		*Move
			作用：让机器人走到当前地图的指定位置

			配置方式：
				参数：(position,)
				参数说明：
					position	: 3元组 or Vector3，移动目标位置

			使用实例：
				配置一个移动到(0, 0, 0)点的任务
				DATA["move_to_0_0_0"] = (
					"custom_serial", (
						("Move", ((0, 0, 0),),),	# 注意，(0, 0, 0)后面的逗号不可省略
					),
				)

		*RandomMove
			作用：让机器人在指定中心点周围指定半径范围内找到一个随机
				位置并走过去。

			配置方式：
				参数：(center, range,)
				参数说明：
					center		: 3元组 or Vector3，中心位置
					range		: 小数(float)，半径

			使用实例：
				配置一个在(0, 0, 0)点周围半径10米范围内找一个随机点移动的任务
				DATA["random_move"] = (
					"custom_serial", (
						("RandomMove", ((0, 0, 0), 10,),),
					),
				)

		*Talk
			作用：让机器人在指定频道说话

			频道介绍：
				1: 附近频道
				2: 本地频道
				3: 队伍频道
				4: 家族频道
				5: 帮会频道
				6: 私聊频道
				7: 世界频道(需要游戏币)
				8: 谣言频道
				9: 天音（普通文字广播，需要金币）
				10: 地音（可带表情广播，需要银元）
				22: 帮会战场频道

			配置方式：
				参数：(channel, content, target,)
				参数说明：
					channel		: 整数(int), 频道编号
					content		: string, 说话内容
					target		: string, 目标玩家名字，例如私聊频道，需要填
								写这个，无目标的频道可以省略。

			使用实例：
				配置一个和fatboy私聊的任务
				DATA["talk_to_fatboy"] = (
					"custom_serial", (
						("Talk", (6, "你好，肥仔。", "fatboy",),),
					),
				)

				配置一个在附近频道说话的任务
				DATA["talk_nearby"] = (
					"custom_serial", (
						("Talk", (1, "大家好。",),),
					),
				)

		*PositionDetect
			作用：检测机器人是否到达指定位置，只有到达了，任务才会结束，
				否则会不断地循环检测。可以配合timeout模板实现超过一定时
				间就自动结束。

			配置方式：
				参数：(position, range, interval,)
				参数说明：
					position	: 3元组 or Vector3，目标位置
					range		: 小数(float)，距离目标位置多远认为到达
					interval	: 小数(float), 每隔多少秒检测一次

			使用实例：
				配置一个检测机器人是否到达(0, 0, 0)点的任务，如果机器人
				与(0, 0, 0)点的距离小于1米，则认为到达，每隔0.5秒检测一次
				DATA["reach_0_0_0"] = (
					"custom_serial", (
						("PositionDetect", ((0, 0, 0), 1, 0.5),),
					),
				)

		*Wait
			作用：让机器人等待一段时间再继续做后续任务

			配置方式：
				参数：(time,)
				参数说明：
					time	: 小数(float)，等待时间，单位是秒

			使用实例：
				配置一个等待10秒再移动到(0, 0, 0)点的任务
				DATA["wait_then_move"] = (
					"custom_serial", (
						("Wait", (10,),),
						("Move", ((0, 0, 0),),),
					),
				)

		*Timeout
			作用：让指定任务经过一段时间后自动结束，该任务内部接受一个可中断
				任务类型的内嵌任务实例，任务开始后执行此内嵌任务，直到内嵌任
				务结束或者超时时间到达。

			配置方式：
				参数：(task, timeout,)
				参数说明：
					task	: 任务实例, 必须是可中断任务类型
					timeout	: 小数(float)，等待时间，单位是秒

				说明：由于Timeout需要接受一个任务实例作为参数，所以不能通过
				配置直接配出一个Timeout任务，需要借助任务模板timeout来进行配置

			使用实例：
				配置一个检测机器人是否到达(0, 0, 0)点的任务，并且10秒后如果
				还没达到就自动结束检测
				DATA["detect_timeout"] = (
					"timeout", (				# 注意，这里用的是timeout模板
						10,						# 10秒后就超时，中断任务
						("PositionDetect", ((0, 0, 0), 1, 0.5),),
					),
				)

		*Loop
			作用：让指定任务重复执行，该任务内部接受一个任意类型的内嵌任
				务实例，任务开始后重复执行此内嵌任务，直到被手动中断才会
				停止。

			配置方式：
				参数：(task, start, interval,)
				参数说明：
					task	: 任务实例, 可以是任意类型任务
					start	: 小数(float)，开始后多久开始执行第一次
					interval: 小数(float)，每隔多久执行一次

				说明：由于Loop需要接受一个任务实例作为参数，所以不能通过配置
				直接配出一个Loop任务，需要借助任务模板loop来进行配置

			使用实例：
				配置一个每隔3秒在附近频道说一句“大家好”的任务
				DATA["loop_talk"] = (
					"loop", (					# 注意，这里用的是loop模板
						1,						# 1秒后开始说第一句
						3，						# 每隔3秒说一次
						("Talk", (1, "大家好。",),),
					),
				)

				配置一个每隔3秒在附近频道说一句“大家好”的任务，并且30秒
				后自动结束
				DATA["loop_talk_timeout"] = (
					"timeout", (					# 注意，外层用的是timeout模板
						30,							# 30秒自动结束
						("loop", (					# 注意，这里用的是loop模板
							1,						# 1秒后开始说第一句
							3，						# 每隔3秒说一次
							("Talk", (1, "大家好。",),),
							),
						),
					),
				)

		*Repeat
			作用：让指定任务循环执行，该任务内部接受一个任意类型的内嵌任
				务实例，任务开始后会循环执行此内嵌任务，即内嵌任务完
				成后会自动重新开始，直到被手动中断才会停止。

			配置方式：
				参数：(task, count,)
				参数说明：
					task	: 任务实例, 可以是任意类型任务
					count	: 整数(int)，总共循环多少次，小于零，表示无限循环

				说明：由于Repeat需要接受一个任务实例作为参数，所以不能通过配置
				直接配出一个Repeat任务，需要借助任务模板repeat来进行配置

			使用实例：
				配置一个在位置(0, 0, 0)和(10, 0, 10)之间来回走动，总共走动10次
				就停止的任务
				DATA["repeat_move"] = (
					"repeat", (					# 注意，这里用的是repeat模板
						10,					# 总共重复10次
						("custom_serial"，(
							("move_and_detect", {
								"destination": (0, 0, 0),
								"range": 1,
								"timeout": 10,
							},),

							("move_and_detect", {
								"destination": (10, 0, 10),
								"range": 1,
								"timeout": 10,
							},),
						),),
					),
				)

		*EchoTime
			作用：在标准输出打印一条显示当前时间的信息

			配置方式：
				参数：()
				参数说明：
					无参数

			使用实例：
				配置一个任务，当机器人执行到此任务时输出一条显示当前系统时间
				的打印信息
				DATA["now_time"] = (
					"custom_serial", (
						("EchoTime", (),),			# 注意，如果没有参数，则括号中间不能加逗号
					),
				)

		*FocusTarget
			作用：根据指定的class names设置目标，将会从周围的entity中搜索，直到找到
				一个对应的entity，如果有多个，将取最近的一个作为目标。这个任务会
				重复执行搜索，直到找到一个才会停止。

			配置方式：
				参数：(class_names, )
				参数说明：
					class_names: entity的className列表或元组，例如("20321001", "20321002",)

			使用实例：
				配置一个任务，将npc className是20321001或者20321002的最近的entity设置为目标
				DATA["focus_target"] = (
					"custom_serial", (
						("FocusTarget", (("20321001", "20321002",),),),
					),
				)

		*FocusEnemy
			作用：设置可攻击目标，根据指定的class names，从周围的entity中搜索，直到找到
				一个对应的entity，如果有多个，将取最近的一个作为目标。这个任务会
				重复执行搜索，直到找到一个才会停止。

			配置方式：
				参数：(class_names, )
				参数说明：
					class_names: entity的className列表或元组，例如("20321001", "20321002",)
						可以是空括号，表明设置任意一个可以攻击的entity为目标。

			使用实例：
				配置一个任务，将最近任意一个可攻击的entity设置为目标
				DATA["focus_enemy"] = (
					"custom_serial", (
						("FocusEnemy", ((),),),
					),
				)

		*FocusSelf
			作用：把自己设置为目标。例如要给自己加buff，就先把自己设置为目标。

			配置方式：
				参数：()
				参数说明：
					无参数

			使用实例：
				配置一个任务，将自己设置为目标
				DATA["focus_self"] = (
					"custom_serial", (
						("FocusSelf", (),),
					),
				)

		*TestTarget
			作用：检查目标，如果当前没有目标将会触发一个异常，中断后面的任务执行。
				一般用于调试。

			配置方式：
				参数：()
				参数说明：
					无参数

			使用实例：
				配置一个任务，检测如果当前没有目标就中断执行，否则对目标使用
				技能311153001
				DATA["test_target"] = (
					"custom_serial", (
						("TestTarget", (),),
						("SpellTarget", (311153001,),),
					),
				)

		*TargetInvalid
			作用：检查目标，如果当前没有目标或者目标无效那么结束此任务。

			配置方式：
				参数：()
				参数说明：
					无参数

			使用实例：
				配置一个任务，检测如果当前没有目标就说一句话“目标消失了！”
				DATA["test_target_invalid"] = (
					"custom_serial", (
						("TargetInvalid", (),),
						("Talk", (1, "目标消失了！",),),
					),
				)

		*FollowTarget
			作用：跟随当前目标，直到目标消失。

			配置方式：
				参数：(range,)
				参数说明：
					range: 小数(float)，跟到距离目标位置多远的位置

			使用实例：
				配置一个任务，始终跟随在距离当前目标2米的范围内
				DATA["follow_target"] = (
					"custom_serial", (
						("FollowTarget", (2,),),
					),
				)

		*SeekTarget
			作用：追踪当前目标，直到走到距离目标指定距离内停下。

			配置方式：
				参数：(range,)
				参数说明：
					range: 小数(float)，跟到距离目标位置多远的位置

			使用实例：
				配置一个任务，追到距离当前目标3米的距离时停下
				DATA["seek_target"] = (
					"custom_serial", (
						("SeekTarget", (3,),),
					),
				)

		*SpellTarget
			作用：对当前目标使用指定技能

			配置方式：
				参数：(skill_id,)
				参数说明：
					skill_id: 技能ID

			使用实例：
				配置一个任务，对当前目标使用技能311153001
				DATA["seek_target"] = (
					"custom_serial", (
						("SpellTarget", (311153001,),),
					),
				)

		*AddSkills
			作用：给指定职业的机器人增加一个或多个技能

			职业介绍：
				16: 战士
				32: 剑客
				48: 弓箭手
				64: 法师

			配置方式：
				参数：(skills, profession,)
				参数说明：
					skills		: 技能列表或元组，例如(311153001, 311163001,)
					profession	: 整数(int)，职业ID

			使用实例：
				配置一个任务，如果机器人是战士，就给它加技能322458001，如果是
				剑客，加技能322460001，弓箭手加322462001，法师加322464001
				DATA["seek_target"] = (
					"custom_serial", (
						("AddSkills", ((322458001,), 16,),),
						("AddSkills", ((322460001,), 32,),),
						("AddSkills", ((322462001,), 48,),),
						("AddSkills", ((322464001,), 64,),),
					),
				)

	2、任务模板介绍：

		*timeout
			作用：创建一个超时自动结束的任务（Timeout），该任务内部接受一个
				可中断任务类型的内嵌任务实例，任务开始后执行此内嵌任务，直到
				内嵌任务结束或者超时时间到达。

			配置方式：
				元组嵌套，可以嵌套单一任务，也可以嵌套任务模板
				参数：(timeout, (TaskType, args,),)
				参数说明：
					timeout	: 小数(float)，等待时间，单位是秒
					TaskType: 单一任务名称或者任务模板名称
					args	: 和TaskType对应的参数数据

			使用实例：
				配置一个检测机器人是否到达(0, 0, 0)点的任务，并且10秒后如果
				还没达到就自动结束检测
				DATA["detect_timeout"] = (
					"timeout", (
						10,
						# 嵌套一个单一任务PositionDetect
						("PositionDetect", ((0, 0, 0), 1, 0.5),),
					),
				)

				配置一个每隔3秒在附近频道说一句“大家好”的任务，并且30秒
				后自动结束
				DATA["loop_talk_timeout"] = (
					"timeout", (
						30,
						("loop", (					# 嵌套一个任务模板loop
							1,
							3,
							("Talk", (1, "大家好。",),),
							),
						),
					),
				)

		*loop
			作用：创建一个不断定时循环的任务（Loop），该任务内部接受一个任意类
				型的内嵌任务实例，任务开始后重复执行此内嵌任务，直到被手动
				中断才会停止。

			配置方式：
				元组嵌套，可以嵌套单一任务，也可以嵌套任务模板
				参数：(start, interval, (TaskType, args,),)
				参数说明：
					start	: 小数(float)，开始后多久开始执行第一次
					interval: 小数(float)，每隔多久执行一次
					TaskType: 单一任务名称或者任务模板名称
					args	: 和TaskType对应的参数数据

			使用实例：
				配置一个每隔3秒在附近频道说一句“大家好”的任务
				DATA["loop_talk"] = (
					"loop", (
						1,
						3,
						("Talk", (1, "大家好。",),),	# 内嵌单一任务
					),
				)

		*repeat
			作用：创建一个不断循环的任务（Repeat），该任务内部接受一个任意
				类型的内嵌任务实例，任务开始后会循环执行此内嵌任务，即
				内嵌任务完成后会自动重新开始，直到被手动中断才会停止。

			配置方式：
				元组嵌套，可以嵌套单一任务，也可以嵌套任务模板
				参数：(count, (TaskType, args,),)
				参数说明：
					count	: 整数(int)，总共循环多少次，小于零，表示无限循环
					TaskType: 单一任务名称或者任务模板名称
					args	: 和TaskType对应的参数数据

			使用实例：
				配置一个在位置(0, 0, 0)和(10, 0, 10)之间来回走动，总共走动10次
				就停止的任务
				DATA["repeat_move"] = (
					"repeat", (					# 注意，这里用的是repeat模板
						10,					# 总共重复10次
						("custom_serial"，(
							("move_and_detect", {
								"destination": (0, 0, 0),
								"range": 1,
								"timeout": 10,
							},),

							("move_and_detect", {
								"destination": (10, 0, 10),
								"range": 1,
								"timeout": 10,
							},),
						),),
					),
				)

		*custom_serial
			作用：创建一个顺序任务组（SerialTaskGroup）。任务组内的任务按照配
				置的先后顺序执行，只有当前正在执行的任务结束（完成或者被打断）
				了，才会继续执行下一个任务，当最后一个任务结束了，任务组才会结
				束。
				注意，任务组也是一个任务，可以嵌套到其他任务组中执行。

			配置方式：
				元组嵌套，可以嵌套单一任务，也可以嵌套任务模板
				参数：((TaskType, args,), (TaskType, args,), ...)
				参数说明：
					TaskType: 单一任务名称或者任务模板名称
					args	: 和TaskType对应的参数数据

			使用实例：
				配置一个任务，先传送到凤鸣城(0, 0, 0)点，然后等待40秒，
				接着每隔3秒在附近频道说一句“大家好”，并且30秒后自动
				结束
				DATA["teleport_and_talk"] = (
					"custom_serial", (				# custom_serial任务模板
						("Teleport", ("fengming", (0, 0, 0),),),
						("Wait", (40,),),			# 嵌套单一任务Wait
						("timeout", (				# 嵌套任务模板timeout
								30,
								("loop", (			# 任务模板timeout中再嵌套loop模板
									1,
									3,
									("Talk", (1, "大家好。",),),
									),
								),
							),
						),
					),
				)

				使用注意：嵌套是没有层数限制的，但是太多嵌套会使配置难以理解
				而且容易出错。如果某些测试需求需要进行太多嵌套，那么可以考虑
				为这些任务创建一个任务模板，以简化任务配置，减少出错。

		*custom_parallel
			作用：创建一个并发任务组（ParallelTaskGroup）。任务组内的任务将会
				并发执行，当任务组内最晚结束的任务结束时，任务组才会结束。

			配置方式：
				元组嵌套，可以嵌套单一任务，也可以嵌套任务模板
				参数：((TaskType, args,), (TaskType, args,), ...)
				参数说明：
					TaskType: 单一任务名称或者任务模板名称
					args	: 和TaskType对应的参数数据

			使用实例：
				配置一个任务，任务开始后机器人往目标位置(0, 0, 0)移动，同时每隔
				3秒在附近频道说“正在移动中！”直到到达目标位置或者超过10秒才停
				止
				DATA["move_and_talk"] = (
					"custom_parallel", (			# custom_parallel任务模板
						("Move", ((0, 0, 0),),),
						("timeout", (
								10,
								("PositionDetect", ((0, 0, 0), 1, 0.5),),
							),
						),
						("timeout", (				# 嵌套任务模板timeout
								10,
								("loop", (			# 任务模板timeout中再嵌套loop模板
									1,
									3，
									("Talk", (1, "正在移动中！",),),
									),
								),
							),
						),
					),
				)

		*move_and_detect
			作用：创建一个顺序任务组（SerialTaskGroup）。任务组包含3个任务，向
				目标位置移动，然后开启检测，如果到达了目标位置或者超过一定时间
				则任务结束。

			配置方式：
				字典关键字参数配置（字典用花括号表示）
				参数：
					{
					"destination": destination,
					"range": range,
					"timeout": timeout,
					}
				参数说明：
					destination	: 3元组 or Vector3，移动目标位置
					range		: 小数(float)，距离目标位置多远认为到达
					timeout		: 小数(float)，多久超时，单位是秒

			使用实例：
				配置一个任务，让机器人往(0, 0, 0)点移动，距离目标位置小于1米时
				结束，或者超过10秒仍未到达目标位置结束
				DATA["move_and_detect"] = (
					"move_and_detect", {
						"destination": (0, 0, 0),
						"range": 1,
						"timeout": 10,
					},
				),

		*tp_wait_move
			作用：传送到指定地图，然后等待一段时间，接着往指定位置移动。
				这是一个早期实现的模板，可以用custom_serial模板来代替，所以不建
				议使用这个模板，这里不多做介绍。

		*primacy_parallel
			作用：创建一个并发任务组（PrimacyParallelGroup）。任务组的第一个任务
			是主任务，当主任务结束时，任务组就会结束。任务组内的任务并发执行。

			配置方式：
				元组嵌套，可以嵌套单一任务，也可以嵌套任务模板
				参数：((PrimaryTaskType, args,), (TaskType, args,), ...)
				参数说明：
					PrimaryTaskType	: 单一任务名称或者任务模板名称，这个是主任务
					TaskType	: 单一任务名称或者任务模板名称
					args		: 和TaskType对应的参数数据

			使用实例：
				配置一个任务，让机器人每隔一秒使用技能311153001攻击当前目标，
				直到目标死亡。
				DATA["move_and_detect"] = (
					"primacy_parallel", (			# 使用主任务模板
						("TargetInvalid", (),),		# 主任务：当目标无效时就停止任务
						("repeat", (
							-1,			# 无限重复使用技能311153001
							("custom_serial", (
								# 追上目标
								("SeekTarget", (),),
								# 释放技能
								("SpellTarget", (311153001,),),
								# 每隔一秒使用一次技能
								("Wait", (1,),),
							),),
						),),
					),
				),
